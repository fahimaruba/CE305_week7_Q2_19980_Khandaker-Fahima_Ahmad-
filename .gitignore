def HamEncoding(msg):
    m = len(msg)
    k = 0
    while 2 ** k < m + k + 1:
        k += 1
    encoded_msg = [0] * (m + k)
    
    # Initialize the positions of the parity bits
    parity_positions = [2 ** i - 1 for i in range(k)]
    
    j = 0  # Index for the original data
    for i in range(m + k):
        if i in parity_positions:
            # Calculate the parity bits
            encoded_msg[i] = 0
            for p in range(m):
                if i & (2 ** p):
                    encoded_msg[i] ^= int(msg[p])
        else:
            # Copy the original data bits
            encoded_msg[i] = int(msg[j])
            j += 1
    
    return ''.join(map(str, encoded_msg))

def HamDecoding(rcv, k):
    received_msg = list(map(int, rcv))
    m = len(received_msg) - k
    parity_positions = [2 ** i - 1 for i in range(k)]
    
    # Initialize the parity check bits
    parity_check = [0] * k
    for i in range(k):
        for j in range(m + k):
            if j & (2 ** i):
                parity_check[i] ^= received_msg[j]
    
    error_position = sum(2 ** i for i in range(k) if parity_check[i])
    
    if error_position == 0:
        return 'No error'
    else:
        # Correct the error
        received_msg[error_position - 1] ^= 1
        corrected_msg = ''.join(map(str, received_msg))
        return f'Error at Position {error_position}, and correct data: {corrected_msg}'

# Examples and test cases
org_sig1 = '1101'
encoded_output1 = HamEncoding(org_sig1)
print(f"Encoded Output 1: {encoded_output1}")

org_sig2 = '1001011'
encoded_output2 = HamEncoding(org_sig2)
print(f"Encoded Output 2: {encoded_output2}")

received_sig1 = '1010101'
k = 3
print(f"Decoding Result 1: {received_sig1} => {HamDecoding(received_sig1, k)}")

received_sig2 = '1010001'
k = 3
print(f"Decoding Result 2: {received_sig2} => {HamDecoding(received_sig2, k)}")

received_sig3 = '10110010011'
k = 4
print(f"Decoding Result 3: {received_sig3} => {HamDecoding(received_sig3, k)}")

received_sig4 = '10110000011'
k = 4
print(f"Decoding Result 4: {received_sig4} => {HamDecoding(received_sig4, k)}")
